cmake_minimum_required(VERSION 3.7)

if(CMAKE_CONFIGURATION_TYPES)
   set(CMAKE_CONFIGURATION_TYPES Release Debug)
   set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} CACHE STRING "Append user-defined configuration to list of configurations to make it usable in Visual Studio" FORCE)
endif()

project(VKFW)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

get_filename_component(FW_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR} REALPATH)
set(FW_WINDOW_WIDTH "1920" CACHE STRING "Application main window width.")
set(FW_WINDOW_HEIGHT "1080" CACHE STRING "Application main window height.")
set(FW_RESOURCE_DIR "resources" CACHE STRING "Resources directory in project structure.")
set(FW_EVAL_DIR "evaluation" CACHE STRING "Base path for evaluation.")
set(FW_RESOURCE_BASE_PATH ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR})
set(FW_EVAL_BASE_PATH ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_EVAL_DIR})

set(COMPILE_DEFINITIONS_DEBUGOPENGLCALLS ${COMPILE_DEFINITIONS_DEBUG})
set(CMAKE_CXX_FLAGS_DEBUGOPENGLCALLS ${CMAKE_CXX_FLAGS_DEBUG})
set(CMAKE_C_FLAGS_DEBUGOPENGLCALLS ${CMAKE_C_FLAGS_DEBUG})
set(CMAKE_EXE_LINKER_FLAGS_DEBUGOPENGLCALLS ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
set(CMAKE_SHARED_LINKER_FLAGS_DEBUGOPENGLCALLS ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})

add_subdirectory(VKFWLib)

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX /EHsc")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unused-function -Wno-unused-parameter -Wextra -Wpedantic")
endif()

if(NOT EXISTS "${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.xml")
   configure_file("${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.xml" "${PROJECT_NAME}Config.xml")
endif()

include("${CMAKE_SOURCE_DIR}/${FWLIB_LIBNAME}/cmake/CompileSpirvShader.cmake")

file(GLOB_RECURSE RES_FILES ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.*)
file(GLOB_RECURSE SHADERS 
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.vert 
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.frag 
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.comp 
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.tesc 
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.tese
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.geom)
set(COMPILED_SHADERS "")
foreach(SHADER ${SHADERS})
    compile_spirv_shader(${SHADER})
    list(APPEND COMPILED_SHADERS ${COMPILE_SPIRV_SHADER_RETURN})
endforeach()
if(NOT "${COMPILED_SHADERS}" STREQUAL "")
    LIST(REMOVE_ITEM RES_FILES ${COMPILED_SHADERS})
    source_group("Resources\\CompiledShaders" FILES ${COMPILED_SHADERS})
endif()

file(GLOB TOP_FILES
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.h
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.cpp
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.cu)
file(GLOB_RECURSE TMP_FILES
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.h
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.cpp
    ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/*.cu)
LIST(REMOVE_ITEM TMP_FILES ${RES_FILES})
LIST(REMOVE_ITEM TMP_FILES ${TOP_FILES})

foreach(f ${TMP_FILES})
    file(RELATIVE_PATH SRCGR ${CMAKE_SOURCE_DIR}/${PROJECT_NAME} ${f})
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()
source_group(" " FILES ${TOP_FILES})


foreach(f ${RES_FILES})
    set_source_files_properties(${f} PROPERTIES HEADER_FILE_ONLY TRUE)
    file(RELATIVE_PATH SRCGR ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR} ${f})
    set(SRCGR "Resources/${SRCGR}")
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()

file(GLOB_RECURSE RES_OBJ_FILES ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/*.obj)
foreach(f ${RES_OBJ_FILES})
    set_source_files_properties(${f} PROPERTIES HEADER_FILE_ONLY TRUE)
endforeach()

# source_group("Extern" FILES ${EXTERN_SOURCES_PROJECT})

file(GLOB PROJECT_CONFIGS CMakeLists.txt Readme.md .clang-format)

include_directories(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/)
add_executable(${PROJECT_NAME} WIN32 ${COMPILED_SHADERS} ${TMP_FILES} ${TOP_FILES} ${RES_FILES} ${PROJECT_CONFIGS})
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${VULKAN_LIBRARY} VKFWLib)

set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${PROJECT_NAME})
set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:DebugOpenGLCalls>:_OGL_DEBUG_MSGS> _CRT_SECURE_NO_WARNINGS _SCL_SECURE_NO_WARNINGS)


add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_BINARY_DIR}/${FWLIB_LIBNAME}/$<CONFIGURATION>/${FWLIB_LIBNAME}.dll" ${CMAKE_BINARY_DIR})
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_BINARY_DIR}/${FWLIB_LIBNAME}/$<CONFIGURATION>/${FWLIB_LIBNAME}.pdb" ${CMAKE_BINARY_DIR})
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_BINARY_DIR}/${FWLIB_LIBNAME}/extern/g3log/$<CONFIGURATION>/g3logger.dll" ${CMAKE_BINARY_DIR})

file(GLOB_RECURSE MYSHBIN_FILES ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/${FW_RESOURCE_DIR}/models/*.myshbin)
add_custom_target("CleanBinary" COMMAND ${CMAKE_COMMAND} -E remove ${MYSHBIN_FILES} ${COMPILED_SHADERS})
