#version 460
#extension GL_EXT_ray_tracing : require
#define RAYGEN

#include "../rt_sample_host_interface.h"
#include "../../core/random.glsl"
#include "../../core/sampling.glsl"
#include "../rayTraversal.glsl"

layout(binding = ResultImage, set = ConvergenceSet, rgba32f) uniform image2D image;

const float aoRayCount = 16;

vec3 face_forward(vec3 direction, vec3 normal)
{
    if (dot(normal, direction) > 0.0f) normal *= -1;
    return normal;
}

void compute_default_basis(const vec3 normal, out vec3 tangent, out vec3 binormal)
{
  if(abs(normal.x) > abs(normal.y))
    tangent = vec3(normal.z, 0, -normal.x) / sqrt(normal.x * normal.x + normal.z * normal.z);
  else
    tangent = vec3(0, -normal.z, normal.y) / sqrt(normal.y * normal.y + normal.z * normal.z);
  binormal = cross(normal, tangent);
}

void main()
{
    vec4 resultColor = vec4(0.0f);
    if (cam.cameraMovedThisFrame != 1) {
        resultColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy));
    }

    float aoValue = resultColor.r;
    float aoNormalize = resultColor.a;
    float shaderRuns = resultColor.g + 1.0f;
    float traceHits = resultColor.b;

    resultColor = vec4(aoValue, shaderRuns, traceHits, aoNormalize);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), resultColor);

    const bool cosSample = cam.cosineSampled == 1;
    uint rngState = initRNG(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, cam.frameId);

    vec3 origin, direction;
    sampleCameraRay(origin, direction, cam, rngState);
    float tmax = 10000.0;
    vec3 normal;

    bool hit = findNextNonSpecularHit(origin, direction, normal, tmax);
    if (hit) {
        traceHits += 1.0f;
        vec3 n = face_forward(direction, normal);
        vec3 s, t;
        compute_default_basis(n, s, t);
        vec3 p = origin;

        for (int i = 0; i < int(aoRayCount); ++i) {
            vec3 sample_direction;
            float pdf;
            if (!cosSample)
            {
                sample_direction = sampleUniformHemisphere(n, s, t, rngState);
                pdf = uniformHemispherePDF();
            }
            else
            {
                sample_direction = sampleCosineHemisphere(n, s, t, rngState);
                pdf = cosineHemispherePDF(abs(sample_direction.z));
            }

            vec3 hitNormal, rayOrigin = p, rayDirection = sample_direction;
            if (!findNextNonSpecularHit(rayOrigin, rayDirection, hitNormal, cam.maxRange)) {
                aoValue += dot(sample_direction, n) / (M_PI * pdf);
                aoNormalize += 1.0f;
            }
            else
            {
                aoNormalize += 1.0f;
            }
        }
    }

    resultColor = vec4(aoValue, shaderRuns, traceHits, aoNormalize);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), resultColor);
}
