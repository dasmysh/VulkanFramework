#version 460
#extension GL_EXT_ray_tracing : require

#include "ray.glsl"
#include "../core/random.glsl"
#include "../core/sampling.glsl"
#include "ray_tracing_shader_host_interface.h"

layout(binding = AccelerationStructure, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = ResultImage, set = 0, rgba8) uniform image2D image;
layout(binding = CameraProperties, set = 0) uniform CameraPropertiesBuffer
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT RayPayload hitValue;

const float PI = 3.14159265359;
const float aoRayCount = 64;

vec3 randomPointOnHemisphere(vec3 seed) {
    vec2 p = vec2(0.0f);
    vec2 u = vec2(random(seed), random(vec3(seed.xy, seed.z + 0.5f / float(aoRayCount))));
    vec2 uOffset = 2.0f * u - vec2(1.0f);

    if (uOffset.x != 0 || uOffset.y != 0) {
        float theta, r;
        if (abs(uOffset.x) > abs(uOffset.y)) {
            r = uOffset.x;
            theta = (PI / 4.0f) * (uOffset.y / uOffset.x);
        } else {
            r = uOffset.y;
            theta = (PI / 2.0f) - (PI / 4.0f) * (uOffset.x / uOffset.y);
        }
        p = r * vec2(cos(theta), sin(theta));
    }

    float z = sqrt(max(0.0f, 1.0f - p.x * p.x - p.y * p.y));
    return vec3(p.x, p.y, z);
}

void compute_default_basis(const vec3 normal, out vec3 x, out vec3 y, out vec3 z)
{
    // ZAP's default coordinate system for compatibility
    z              = normal;
    const float yz = -z.y * z.z;
    y = normalize(((abs(z.z) > 0.99999f) ? vec3(-z.x * z.y, 1.0f - z.y * z.y, yz) : vec3(-z.x * z.z, yz, 1.0f - z.z * z.z)));

    x = cross(y, z);
}


float pdfPointOnHemisphere(float cosTheta) {
    return cosTheta / PI;
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0,0,0,1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    hitValue.attenuation = vec3(1.0f);
    hitValue.rayDirection = direction.xyz;
    hitValue.rayOrigin = origin.xyz;
    hitValue.done = 0;

    traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, hitValue.rayOrigin, tmin, hitValue.rayDirection, tmax, 0);

    vec3 resultColor = hitValue.attenuation;
    if (hitValue.done == 0) {
        float occlusion = 0.0f;
        // vec3 seed = vec3(inUV, 0.0f);

        vec3 normal = normalize(hitValue.rayDirection);
        vec3 aoOrigin = hitValue.rayOrigin + 0.01f * normal;

        vec3 x, y, z;
        compute_default_basis(normal, x, y, z);
        uint  seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, 23);

        for (int i = 0; i < int(aoRayCount); ++i) {
            float r1 = radinv2(seed);
            float r2 = radinv_fl(seed, 3);
            float sq = sqrt(1.0 - r2);
            float randPdf = 1.0f;

            vec3 direction = vec3(cos(2 * PI * r1) * sq, sin(2 * PI * r1) * sq, sqrt(r2));
            vec3 aoDirection      = direction.x * x + direction.y * y + direction.z * z;
            seed++;

            vec3 rightDir = vec3(0.0f, 1.0f, 0.0f);
            if (normal.x < normal.y) {
                vec3 rightDir = vec3(1.0f, 0.0f, 0.0f);
            }

            vec3 forwardDir = normalize(cross(normal, rightDir));
            rightDir = normalize(cross(forwardDir, normal));
            //vec3 randDir = randomPointOnHemisphere(seed);
            //seed.z += 1.0f / float(aoRayCount);
            //float randPdf = pdfPointOnHemisphere(abs(randDir.z));
            //vec3 aoDirection = normalize(randDir.x * rightDir + randDir.y * forwardDir + randDir.z * normal);

            traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, aoOrigin, tmin, aoDirection, tmax, 0);
            if (hitValue.attenuation.x < 0.5f) {
                // occlusion += 1.0f;
                occlusion += dot(aoDirection, normal) / (randPdf * aoRayCount);
            }

        }
        occlusion = 1.0f - occlusion;
        // occlusion = 1.0f - (occlusion / aoRayCount);
        occlusion = pow(clamp(occlusion, 0, 1), 2.0f);
        resultColor = vec3(occlusion);
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(resultColor, 0.0));
}
